#line 2 "avrlex.cc"

#line 4 "avrlex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[402] =
    {   0,
        0,    0,  200,  198,  194,  193,   26,  198,  197,  198,
        3,   15,  198,   17,   18,    1,   22,   20,   23,   21,
        2,  181,  181,   19,  195,    8,   24,    9,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  163,  164,  165,
       16,   14,   25,  194,  198,   21,  194,   11,    0,  179,
        0,  197,  184,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  196,  181,  185,  185,    0,  195,    4,
        6,   10,    7,    5,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,   52,  169,  192,

      170,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  156,  192,  159,  192,  192,  192,  192,  192,  192,
      192,  192,   60,  192,  192,  168,  192,  192,  180,  192,
      192,  192,  192,  192,  192,  192,  192,  160,  192,  192,
      192,  192,   12,  194,    0,    0,    0,    0,    0,    0,
        0,  179,  191,    0,  191,    0,    0,    0,    0,    0,
       30,    0,    0,   31,    0,   29,    0,    0,    0,  196,
      183,  182,   56,   55,  192,   58,  100,  192,  153,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  154,  192,  192,  144,  155,  117,  122,

      124,  119,  105,  121,  123,  120,  118,  107,   51,   71,
      192,  102,  192,  192,  192,   59,  192,  192,  192,  192,
      192,  192,  192,   99,  140,  161,   76,   77,  192,   40,
      166,  152,  101,  192,   61,   63,   97,  125,   74,  148,
      192,  103,  192,  192,  129,  192,  150,  108,   53,  145,
       78,  109,  114,  116,  111,  151,  113,  115,  112,  110,
      192,  134,  162,  149,   54,  192,  106,  131,    0,    0,
        0,    0,    0,    0,  190,  188,    0,    0,    0,    0,
        0,   27,    0,    0,    0,   28,    0,   32,   35,   69,
       75,  136,  142,  143,   79,   80,   82,   87,   89,   90,

       93,   94,   96,   88,   84,   81,   83,   95,   91,   92,
       85,   86,  137,  192,  141,   57,  192,  192,  167,  135,
       49,   66,   41,   47,  192,  127,   50,   46,   62,   64,
       48,  104,  192,  128,  139,   72,  146,  147,   70,  157,
      158,  192,   73,   98,    0,    0,    0,    0,    0,  188,
        0,  186,    0,    0,   34,   37,    0,   38,  178,   39,
       42,   43,   44,   45,  192,  132,   67,  126,   65,  138,
      130,  175,    0,  174,    0,    0,    0,    0,   33,    0,
      133,   68,    0,    0,  177,    0,  189,    0,  187,    0,
       36,    0,    0,  172,  176,  173,    0,  176,    0,  171,

        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   27,   27,   28,   28,   29,   30,   31,
       32,   33,    1,    1,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
        1,   60,    1,   61,   44,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   44,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,    1,   87,    1,   88,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1
    } ;

static yyconst flex_int16_t yy_base[416] =
    {   0,
        0,   87,  350,  932,   90,  932,  309,   82,    0,    0,
      932,  328,  279,  932,  932,  932,  932,  932,  932,  109,
      300,  167,   64,  932,    0,   66,  278,   68,   57,  163,
       90,   90,  201,   56,    0,   81,  176,   57,  207,  101,
      102,  129,  230,  290,  331,   53,   69,    0,    0,    0,
      932,  213,  932,  113,  216,  257,  106,  932,  151,  932,
      178,    0,    0,  932,  264,  321,   69,  100,  108,  325,
      285,  118,  132,    0,    0,  393,  156,    0,    0,  932,
      932,  932,  932,  932,    0,  331,  144,  174,  209,  163,
      387,  333,  207,  216,  228,  434,  216,  426,    0,  181,

        0,  366,  220,  223,  244,  248,  255,  199,  271,  257,
      279,  306,  306,  412,  432,  333,  393,  332,  376,  401,
      332,  398,  356,  399,  443,    0,  431,  440,  499,  467,
      453,  463,  483,  495,  538,  464,  471,  498,  475,  498,
      465,  488,  932,  547,  552,  568,  548,  494,  500,  509,
      500,  208,  932,  262,  244,  622,  213,  522,  504,  538,
      932,  544,  543,  932,  564,  515,  565,  583,  541,    0,
      285,    0,    0,    0,  572,  588,    0,  582,    0,  600,
      601,  589,  605,  618,  619,  614,  608,  621,  616,  622,
      638,  640,  615,    0,  634,  624,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      635,    0,  641,  635,  637,    0,  640,  189,  648,  636,
      661,  661,  658,    0,    0,    0,    0,    0,  173,    0,
        0,    0,    0,  662,  653,  659,    0,    0,    0,    0,
      674,    0,  673,  671,  676,  672,    0,    0,  680,  689,
      687,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      686,    0,    0,    0,  686,  681,    0,    0,  674,  690,
      699,  685,  711,  699,  932,  932,  754,  154,  714,  717,
      719,  932,  719,  722,  719,  932,  729,  932,  932,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  770,    0,    0,  728,  725,    0,    0,
        0,  732,    0,    0,  740,    0,    0,    0,    0,  732,
        0,    0,  743,    0,    0,    0,    0,    0,    0,    0,
        0,  742,    0,    0,  745,  754,  749,  752,  762,  932,
      797,  932,  150,  759,  932,  932,  771,  932,  932,  932,
        0,    0,    0,    0,  764,    0,  760,    0,    0,    0,
        0,  932,  762,  771,  779,  776,  824,  107,  932,  793,
        0,    0,  797,  804,  932,  787,  932,  847,  932,  103,
      932,  814,  817,  810,    0,  932,  823,    0,  822,  932,

      932,  886,  891,  109,  896,  901,  903,  908,  913,  106,
      916,  918,  920,  922,  926
    } ;

static yyconst flex_int16_t yy_def[416] =
    {   0,
      401,    1,  401,  401,  401,  401,  401,  402,  403,  404,
      401,  401,  405,  401,  401,  401,  401,  401,  401,  401,
      401,  401,   22,  401,  406,  401,  401,  401,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      401,  401,  401,  401,  401,   20,  401,  401,  402,  401,
      402,  403,  404,  401,  401,  408,  401,  401,  401,  401,
      401,  401,  401,  409,   23,   23,   76,  410,  406,  401,
      401,  401,  401,  401,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  402,  401,  401,  401,  401,  411,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  409,
       76,  410,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  412,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  401,  401,  401,  401,  401,  401,
      401,  401,  413,  401,  401,  401,  401,  401,  401,  401,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  401,  401,  401,  401,  401,  401,  414,  401,  401,
      407,  407,  401,  401,  401,  401,  401,  401,  401,  414,
      401,  401,  401,  401,  415,  401,  401,  415,  401,  401,

        0,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401
    } ;

static yyconst flex_int16_t yy_nxt[1021] =
    {   0,
        4,    5,    6,    4,    5,    5,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   23,   23,   23,   23,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   35,   39,   40,   41,   42,   43,   35,
       44,   45,   46,   35,   35,   47,   48,   49,   50,    4,
       51,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   35,   44,   45,   46,
       35,   35,   47,   48,   49,   50,   52,   53,   54,   60,
       55,   57,   54,   86,   57,   57,   80,   81,   76,   83,

       84,  107,  113,   87,  141,  142,   56,   57,   88,  172,
       57,   57,   63,  158,  144,  389,  145,   57,  144,  389,
      401,   86,  108,   94,   95,   99,   76,  100,  107,  113,
       87,  141,  146,  142,   96,   88,  109,   97,   98,  121,
      158,   61,   67,   68,   69,   70,   71,  401,  119,  122,
      108,   94,   95,   99,  120,  100,   72,  159,   60,  160,
       73,   96,  352,  109,   97,   98,  352,  121,  168,  169,
       67,   68,   69,   70,   71,  119,  122,  171,  171,  123,
      176,  120,  124,   72,  159,  152,  160,   73,   75,   75,
       75,   75,   75,   75,   75,  168,  327,  169,   89,  179,

       76,   77,   76,   76,   76,   76,  123,   90,  176,  124,
       61,  110,  321,   91,   92,   60,  212,  145,  111,  145,
       93,  145,  112,   78,  177,  275,   89,  179,   76,   77,
       76,   76,   76,   76,   90,  146,  101,   61,  220,  110,
       91,   92,  102,  114,  212,  103,  111,   93,  104,  112,
       78,  177,  105,  178,  115,  116,  275,  106,  117,  195,
      196,  208,  118,  125,  101,  126,  220,   61,  215,  197,
      102,  114,  103,  216,  275,  104,  153,  127,  198,  105,
      178,  115,  116,  128,  106,  117,  195,  196,  208,  118,
      222,  125,  217,  126,  147,  215,  218,  197,  148,  143,

      216,  149,  150,  151,  127,  198,  171,  171,  219,   82,
      128,  129,  129,  129,  129,  129,  129,  129,  222,  217,
       74,  221,  147,  218,  223,  130,  148,  131,  149,  150,
      151,  165,  132,  155,  166,  219,  167,  133,   66,   64,
       58,  224,  156,  156,  156,  156,  156,  156,  221,  401,
      401,  223,  401,  130,  225,  131,  401,  401,  165,  161,
      132,  166,  162,  167,  133,  134,  173,  174,  135,  224,
      193,  237,  175,  401,  401,  136,  163,  157,  231,  137,
      164,  225,  234,  138,  139,  194,  140,  161,  401,  401,
      162,  401,  401,  134,  173,  174,  135,  239,  193,  237,

      175,  213,  136,  163,  157,  231,  137,  164,  214,  234,
      138,  139,  194,  140,   76,   76,   76,   76,   76,   76,
       76,  180,  181,  401,  182,  239,  183,  184,  185,  213,
      235,  186,  187,  188,  401,  189,  214,  232,  190,  191,
      401,  192,  401,  233,  401,  236,  238,  401,  226,  180,
      181,  240,  182,  227,  183,  184,  185,  235,  186,  187,
      188,  209,  189,  228,  232,  190,  191,  210,  192,  199,
      233,  229,  236,  238,  200,  201,  226,  211,  240,  242,
      202,  227,  241,  401,  203,  204,  205,  230,  206,  209,
      228,  243,  207,  401,  401,  210,  401,  199,  401,  229,

      244,  261,  200,  201,  211,  245,  242,  202,  246,  265,
      241,  203,  204,  205,  230,  206,  262,  267,  243,  207,
      129,  129,  129,  129,  129,  129,  129,  247,  244,  261,
      249,  266,  245,  248,  263,  246,  250,  265,  268,  401,
      271,  272,  273,  262,  267,  251,  401,  274,  144,  264,
      145,   57,  144,  145,  247,  145,  280,  145,  249,  266,
      248,  401,  263,  279,  250,  268,  146,  271,  286,  272,
      273,  146,  251,  252,  274,  281,  264,  401,  253,  254,
      284,  401,  282,  280,  255,  401,  401,  401,  256,  257,
      258,  279,  259,  289,  165,  286,  260,  166,  283,  167,

      285,  252,  287,  281,  270,  269,  253,  254,  284,  148,
      282,  255,  149,  150,  151,  256,  257,  258,  401,  259,
      289,  165,  288,  260,  166,  283,  167,  290,  285,  291,
      287,  270,  292,  269,  276,  293,  295,  148,  297,  149,
      150,  151,  298,  277,  277,  277,  277,  277,  277,  305,
      288,  294,  296,  299,  290,  301,  302,  291,  306,  292,
      307,  303,  308,  293,  295,  297,  304,  313,  315,  300,
      298,  314,  316,  309,  317,  311,  323,  305,  294,  296,
      318,  299,  319,  301,  302,  320,  306,  307,  303,  310,
      308,  312,  322,  304,  313,  315,  300,  324,  328,  314,

      316,  309,  317,  311,  323,  325,  326,  318,  329,  319,
      330,  331,  320,  332,  401,  333,  310,  334,  312,  322,
      335,  336,  340,  342,  337,  324,  328,  343,  401,  344,
      270,  345,  325,  326,  346,  329,  347,  330,  341,  331,
      338,  332,  333,  349,  339,  334,  348,  335,  401,  336,
      340,  342,  337,  354,  355,  343,  344,  270,  356,  345,
      357,  358,  346,  347,  359,  341,  350,  338,  360,  401,
      349,  339,  365,  366,  348,  351,  351,  351,  351,  351,
      351,  354,  355,  367,  368,  369,  356,  370,  357,  358,
      371,  359,  361,  362,  363,  364,  360,  372,  373,  365,

      366,  374,  375,  376,  401,  379,  380,  401,  381,  350,
      367,  368,  369,  382,  370,  383,  384,  371,  377,  377,
      377,  377,  377,  377,  372,  373,  385,  386,  374,  375,
      391,  376,  379,  392,  380,  381,  387,  393,  401,  394,
      382,  401,  383,  384,  401,  388,  388,  388,  388,  388,
      388,  395,  396,  385,  386,  397,  399,  400,  391,  387,
      401,  392,  401,  401,  401,  393,  394,  401,  388,  388,
      388,  388,  388,  388,  401,  401,  401,  401,  401,  395,
      396,  401,  397,  401,  399,  400,   59,  401,   59,   59,
       59,   62,  401,   62,   62,   62,   65,  401,   65,   65,

       65,   79,  401,   79,   79,   79,   85,   85,  154,  401,
      154,  154,  154,  170,  401,  170,  170,  170,  278,  278,
      353,  353,  378,  378,  390,  390,  398,  401,  398,  398,
      398,    3,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401
    } ;

static yyconst flex_int16_t yy_chk[1021] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    8,
        2,    5,    2,   29,    5,    5,   26,   26,   23,   28,

       28,   34,   38,   29,   46,   47,    2,   57,   29,  410,
       57,   57,  404,   67,   54,  390,   54,   54,   54,  378,
       23,   29,   36,   31,   31,   32,   23,   32,   34,   38,
       29,   46,   54,   47,   31,   29,   36,   31,   31,   41,
       67,    8,   20,   20,   20,   20,   20,   23,   40,   41,
       36,   31,   31,   32,   40,   32,   20,   68,   59,   69,
       20,   31,  353,   36,   31,   31,  278,   41,   72,   73,
       20,   20,   20,   20,   20,   40,   41,   77,   77,   42,
       87,   40,   42,   20,   68,   61,   69,   20,   22,   22,
       22,   22,   22,   22,   22,   72,  229,   73,   30,   90,

       22,   22,   22,   22,   22,   22,   42,   30,   87,   42,
       59,   37,  218,   30,   30,  152,  100,   55,   37,   55,
       30,   55,   37,   22,   88,  157,   30,   90,   22,   22,
       22,   22,   22,   22,   30,   55,   33,   61,  108,   37,
       30,   30,   33,   39,  100,   33,   37,   30,   33,   37,
       22,   88,   33,   89,   39,   39,  155,   33,   39,   93,
       94,   97,   39,   43,   33,   43,  108,  152,  103,   95,
       33,   39,   33,  104,  154,   33,   65,   43,   95,   33,
       89,   39,   39,   43,   33,   39,   93,   94,   97,   39,
      110,   43,  105,   43,   56,  103,  106,   95,   56,   52,

      104,   56,   56,   56,   43,   95,  171,  171,  107,   27,
       43,   44,   44,   44,   44,   44,   44,   44,  110,  105,
       21,  109,   56,  106,  111,   44,   56,   44,   56,   56,
       56,   71,   44,   66,   71,  107,   71,   44,   13,   12,
        7,  112,   66,   66,   66,   66,   66,   66,  109,    3,
        0,  111,    0,   44,  113,   44,    0,    0,   71,   70,
       44,   71,   70,   71,   44,   45,   86,   86,   45,  112,
       92,  121,   86,    0,    0,   45,   70,   66,  116,   45,
       70,  113,  118,   45,   45,   92,   45,   70,    0,    0,
       70,    0,    0,   45,   86,   86,   45,  123,   92,  121,

       86,  102,   45,   70,   66,  116,   45,   70,  102,  118,
       45,   45,   92,   45,   76,   76,   76,   76,   76,   76,
       76,   91,   91,    0,   91,  123,   91,   91,   91,  102,
      119,   91,   91,   91,    0,   91,  102,  117,   91,   91,
        0,   91,    0,  117,    0,  120,  122,    0,  114,   91,
       91,  124,   91,  114,   91,   91,   91,  119,   91,   91,
       91,   98,   91,  114,  117,   91,   91,   98,   91,   96,
      117,  115,  120,  122,   96,   96,  114,   98,  124,  127,
       96,  114,  125,    0,   96,   96,   96,  115,   96,   98,
      114,  128,   96,    0,    0,   98,    0,   96,    0,  115,

      130,  136,   96,   96,   98,  131,  127,   96,  132,  139,
      125,   96,   96,   96,  115,   96,  137,  141,  128,   96,
      129,  129,  129,  129,  129,  129,  129,  133,  130,  136,
      134,  140,  131,  133,  138,  132,  134,  139,  142,    0,
      148,  149,  150,  137,  141,  134,    0,  151,  144,  138,
      144,  144,  144,  145,  133,  145,  159,  145,  134,  140,
      133,    0,  138,  158,  134,  142,  144,  148,  166,  149,
      150,  145,  134,  135,  151,  160,  138,    0,  135,  135,
      163,    0,  162,  159,  135,    0,    0,    0,  135,  135,
      135,  158,  135,  169,  147,  166,  135,  147,  162,  147,

      165,  135,  167,  160,  147,  146,  135,  135,  163,  146,
      162,  135,  146,  146,  146,  135,  135,  135,    0,  135,
      169,  147,  168,  135,  147,  162,  147,  175,  165,  176,
      167,  147,  178,  146,  156,  180,  181,  146,  182,  146,
      146,  146,  183,  156,  156,  156,  156,  156,  156,  187,
      168,  180,  181,  184,  175,  185,  185,  176,  188,  178,
      189,  186,  190,  180,  181,  182,  186,  193,  196,  184,
      183,  195,  211,  191,  213,  192,  220,  187,  180,  181,
      214,  184,  215,  185,  185,  217,  188,  189,  186,  191,
      190,  192,  219,  186,  193,  196,  184,  221,  234,  195,

      211,  191,  213,  192,  220,  222,  223,  214,  235,  215,
      236,  241,  217,  243,    0,  244,  191,  245,  192,  219,
      246,  249,  251,  261,  250,  221,  234,  265,    0,  266,
      269,  270,  222,  223,  271,  235,  272,  236,  251,  241,
      250,  243,  244,  274,  250,  245,  273,  246,    0,  249,
      251,  261,  250,  279,  280,  265,  266,  269,  281,  270,
      283,  284,  271,  272,  285,  251,  277,  250,  287,    0,
      274,  250,  317,  318,  273,  277,  277,  277,  277,  277,
      277,  279,  280,  322,  325,  330,  281,  333,  283,  284,
      342,  285,  314,  314,  314,  314,  287,  345,  346,  317,

      318,  347,  348,  349,    0,  354,  357,    0,  365,  351,
      322,  325,  330,  367,  333,  373,  374,  342,  351,  351,
      351,  351,  351,  351,  345,  346,  375,  376,  347,  348,
      380,  349,  354,  383,  357,  365,  377,  384,    0,  386,
      367,    0,  373,  374,    0,  377,  377,  377,  377,  377,
      377,  392,  393,  375,  376,  394,  397,  399,  380,  388,
        0,  383,    0,    0,    0,  384,  386,    0,  388,  388,
      388,  388,  388,  388,    0,    0,    0,    0,    0,  392,
      393,    0,  394,    0,  397,  399,  402,    0,  402,  402,
      402,  403,    0,  403,  403,  403,  405,    0,  405,  405,

      405,  406,    0,  406,  406,  406,  407,  407,  408,    0,
      408,  408,  408,  409,    0,  409,  409,  409,  411,  411,
      412,  412,  413,  413,  414,  414,  415,    0,  415,  415,
      415,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "avrlex.l"
#line 2 "avrlex.l"
//////////////////////////////////////////////////////////////////////////////
//
//  File        : avrlex.l
//
//  Author      : Tom Mortensen - Copyright (C) 1999
//
//  Description : Scanner file for AVR assembler
//
//  History
//  ========================================================================
//
//  980902      : Tom - File created.
//  990124      : Tom - Added GPL notice.
//  990329      : Tom - Added support for hex values like 1AB without $ or 0x
//  990512      : Tom - Fixed detection on binary numbers.
//  990522      : Tom - Added support for PC/DC/EC.   
//  991211      : Tom - Fixed .endm problem (it had to be lower case)
//  991217      : Kurt- Added # and support for local labels
//  001101	: Brian - Added support for multiple include search paths
//  010319      : Timothy Lee - Added byte1 function (sames as low())
//  041212      : Tom - Fixed problem with .db 00
//
//////////////////////////////////////////////////////// Tom did this ////////
//
// Copyright notice:
//
// tavrasm - A GNU/Linux assembler for the Atmel AVR series
// of microcontrollers. Copyright (C) 1999 Tom Mortensen
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// Tom Mortensen
//
// E-mail : tom@tavrasm.org
// WWW    : http://www.tavrasm.org
//
//////////////////////////////////////////////////////////////////////////////

/// Include //////////////////////////////////////////////////////////////////

#include <string.h>
#include <ctype.h>
#include "symbol.hh"
#include "semantic.hh"
#include "avrparse.hh"
#include "avrasm.hh"
#include "utils.hh"

/// Extern ///////////////////////////////////////////////////////////////////

GLOBALS(extern);

/// Global ///////////////////////////////////////////////////////////////////

symbolTableEntry       *sym;
YY_BUFFER_STATE        statestack[MAX_CONTEXT_DEPTH];
int                    restartcount = 0;
int                    ret;

/// Defines //////////////////////////////////////////////////////////////////

#define SKIPRESTART 0x02BABE  // Any value that is not a token

/// Prototypes for support function //////////////////////////////////////////

int     restart(void);
int     endofline(void);
int     identifier(void);
int     registers(void);
int     integers(void);
int     macrodef(void);
int     includefile(void);
int     string(void);
int     character(void);
int     doexit(void);
int     macro(symbolSA symb);
void    list(int listtype);
void    illegal(void);

/// Scanner definition ///////////////////////////////////////////////////////

#line 912 "avrlex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 115 "avrlex.l"


#line 1100 "avrlex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 402 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 401 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 117 "avrlex.l"
return STAR;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 118 "avrlex.l"
return DIV;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 119 "avrlex.l"
return MOD;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "avrlex.l"
return LS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 121 "avrlex.l"
return RS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 122 "avrlex.l"
return LE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 123 "avrlex.l"
return GE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 124 "avrlex.l"
return LESS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 125 "avrlex.l"
return GREAT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 126 "avrlex.l"
return EQ;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 127 "avrlex.l"
return NE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 128 "avrlex.l"
return OROR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 129 "avrlex.l"
return ANDAND;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 130 "avrlex.l"
return OR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 131 "avrlex.l"
return AND;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 132 "avrlex.l"
return XOR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 133 "avrlex.l"
return LPAR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 134 "avrlex.l"
return RPAR;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 135 "avrlex.l"
return COLON;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 136 "avrlex.l"
return COMMA;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 137 "avrlex.l"
return DOT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 138 "avrlex.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 139 "avrlex.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 140 "avrlex.l"
return EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 141 "avrlex.l"
return WAVE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 142 "avrlex.l"
return NOT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "avrlex.l"
return DEF;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "avrlex.l"
return EQU;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "avrlex.l"
return EQU;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "avrlex.l"
return DB;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "avrlex.l"
return DW;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 149 "avrlex.l"
return ORG;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 150 "avrlex.l"
return ALIGN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 151 "avrlex.l"
return BYTE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 152 "avrlex.l"
return SET;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 153 "avrlex.l"
return DEVICE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 155 "avrlex.l"
{ yysegment = SEGMENT_CODE;   return CSEG;  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 156 "avrlex.l"
{ yysegment = SEGMENT_DATA;   return DSEG;  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 157 "avrlex.l"
{ yysegment = SEGMENT_EEPROM; return ESEG;  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 159 "avrlex.l"
{ yylval.func   = OP_LOW;   return FUNCTION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 160 "avrlex.l"
{ yylval.func   = OP_HIGH;  return FUNCTION;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 161 "avrlex.l"
{ yylval.func   = OP_LOW;   return FUNCTION;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 162 "avrlex.l"
{ yylval.func   = OP_BYTE2; return FUNCTION;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 163 "avrlex.l"
{ yylval.func   = OP_BYTE3; return FUNCTION;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 164 "avrlex.l"
{ yylval.func   = OP_BYTE4; return FUNCTION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 165 "avrlex.l"
{ yylval.func   = OP_LWRD;  return FUNCTION;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 166 "avrlex.l"
{ yylval.func   = OP_HWRD;  return FUNCTION;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 167 "avrlex.l"
{ yylval.func   = OP_PAGE;  return FUNCTION;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "avrlex.l"
{ yylval.func   = OP_EXP2;  return FUNCTION;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "avrlex.l"
{ yylval.func   = OP_LOG2;  return FUNCTION;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "avrlex.l"
{ yylval.opcode = O_CPC;    return IREGREG; } /* Register */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "avrlex.l"
{ yylval.opcode = O_CP;     return IREGREG; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "avrlex.l"
{ yylval.opcode = O_SBC;    return IREGREG; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "avrlex.l"
{ yylval.opcode = O_SUB;    return IREGREG; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 174 "avrlex.l"
{ yylval.opcode = O_ADD;    return IREGREG; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 175 "avrlex.l"
{ yylval.opcode = O_ADC;    return IREGREG; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 176 "avrlex.l"
{ yylval.opcode = O_CPSE;   return IREGREG; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 177 "avrlex.l"
{ yylval.opcode = O_AND;    return IREGREG; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 178 "avrlex.l"
{ yylval.opcode = O_EOR;    return IREGREG; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 179 "avrlex.l"
{ yylval.opcode = O_OR;     return IREGREG; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 180 "avrlex.l"
{ yylval.opcode = O_MOV;    return IREGREG; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 181 "avrlex.l"
{ yylval.opcode = O_MOVW;   return IREGREGW; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 182 "avrlex.l"
{ yylval.opcode = O_MUL;    return IREGREG; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 183 "avrlex.l"
{ yylval.opcode = O_MULS;   return IREGREG; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 184 "avrlex.l"
{ yylval.opcode = O_MULSU;  return IREGREG; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 185 "avrlex.l"
{ yylval.opcode = O_FMUL;   return IREGREG; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 186 "avrlex.l"
{ yylval.opcode = O_FMULS;  return IREGREG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 187 "avrlex.l"
{ yylval.opcode = O_FMULSU; return IREGREG; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 188 "avrlex.l"
{ yylval.opcode = O_ADIW;   return IREGIMMW; } /* Reg/Imm */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 189 "avrlex.l"
{ yylval.opcode = O_SBIW;   return IREGIMMW; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 190 "avrlex.l"
{ yylval.opcode = O_CPI;    return IREGIMM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 191 "avrlex.l"
{ yylval.opcode = O_SBCI;   return IREGIMM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 192 "avrlex.l"
{ yylval.opcode = O_SUBI;   return IREGIMM; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 193 "avrlex.l"
{ yylval.opcode = O_ORI;    return IREGIMM; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 194 "avrlex.l"
{ yylval.opcode = O_ANDI;   return IREGIMM; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 195 "avrlex.l"
{ yylval.opcode = O_LDI;    return IREGIMM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 196 "avrlex.l"
{ yylval.opcode = O_LDS;    return IREGIMM; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 197 "avrlex.l"
{ yylval.opcode = O_SBR;    return IREGIMM; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 198 "avrlex.l"
{ yylval.opcode = O_BRCC;   return IIMM;    } /* Immediate */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 199 "avrlex.l"
{ yylval.opcode = O_BRCS;   return IIMM;    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 200 "avrlex.l"
{ yylval.opcode = O_BRNE;   return IIMM;    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 201 "avrlex.l"
{ yylval.opcode = O_BREQ;   return IIMM;    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 202 "avrlex.l"
{ yylval.opcode = O_BRPL;   return IIMM;    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 203 "avrlex.l"
{ yylval.opcode = O_BRMI;   return IIMM;    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 204 "avrlex.l"
{ yylval.opcode = O_BRVC;   return IIMM;    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 205 "avrlex.l"
{ yylval.opcode = O_BRVS;   return IIMM;    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 206 "avrlex.l"
{ yylval.opcode = O_BRGE;   return IIMM;    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 207 "avrlex.l"
{ yylval.opcode = O_BRLT;   return IIMM;    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "avrlex.l"
{ yylval.opcode = O_BRHC;   return IIMM;    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 209 "avrlex.l"
{ yylval.opcode = O_BRHS;   return IIMM;    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 210 "avrlex.l"
{ yylval.opcode = O_BRTC;   return IIMM;    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 211 "avrlex.l"
{ yylval.opcode = O_BRTS;   return IIMM;    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "avrlex.l"
{ yylval.opcode = O_BRID;   return IIMM;    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "avrlex.l"
{ yylval.opcode = O_BRIE;   return IIMM;    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 214 "avrlex.l"
{ yylval.opcode = O_BRSH;   return IIMM;    }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 215 "avrlex.l"
{ yylval.opcode = O_BRLO;   return IIMM;    }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 216 "avrlex.l"
{ yylval.opcode = O_NEG;    return IREG;    } /* Register */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 217 "avrlex.l"
{ yylval.opcode = O_SWAP;   return IREG;    }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 218 "avrlex.l"
{ yylval.opcode = O_INC;    return IREG;    }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 219 "avrlex.l"
{ yylval.opcode = O_ASR;    return IREG;    }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 220 "avrlex.l"
{ yylval.opcode = O_LSR;    return IREG;    }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 221 "avrlex.l"
{ yylval.opcode = O_DEC;    return IREG;    }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 222 "avrlex.l"
{ yylval.opcode = O_POP;    return IREG;    }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 223 "avrlex.l"
{ yylval.opcode = O_PUSH;   return IREG;    }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 224 "avrlex.l"
{ yylval.opcode = O_CLR;    return IREG;    }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 225 "avrlex.l"
{ yylval.opcode = O_TST;    return IREG;    }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 226 "avrlex.l"
{ yylval.opcode = O_COM;    return IREG;    }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 227 "avrlex.l"
{ yylval.opcode = O_ROR;    return IREG;    }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 228 "avrlex.l"
{ yylval.opcode = O_SEC;    return INOARGS; } /* No arguments */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 229 "avrlex.l"
{ yylval.opcode = O_SEZ;    return INOARGS; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 230 "avrlex.l"
{ yylval.opcode = O_SEN;    return INOARGS; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 231 "avrlex.l"
{ yylval.opcode = O_SEV;    return INOARGS; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 232 "avrlex.l"
{ yylval.opcode = O_SES;    return INOARGS; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 233 "avrlex.l"
{ yylval.opcode = O_SEH;    return INOARGS; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 234 "avrlex.l"
{ yylval.opcode = O_SET;    return INOARGS; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 235 "avrlex.l"
{ yylval.opcode = O_SEI;    return INOARGS; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 236 "avrlex.l"
{ yylval.opcode = O_CLC;    return INOARGS; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 237 "avrlex.l"
{ yylval.opcode = O_CLZ;    return INOARGS; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 238 "avrlex.l"
{ yylval.opcode = O_CLN;    return INOARGS; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 239 "avrlex.l"
{ yylval.opcode = O_CLV;    return INOARGS; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 240 "avrlex.l"
{ yylval.opcode = O_CLS;    return INOARGS; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 241 "avrlex.l"
{ yylval.opcode = O_CLH;    return INOARGS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 242 "avrlex.l"
{ yylval.opcode = O_CLT;    return INOARGS; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 243 "avrlex.l"
{ yylval.opcode = O_CLI;    return INOARGS; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 244 "avrlex.l"
{ yylval.opcode = O_NOP;    return INOARGS; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 245 "avrlex.l"
{ yylval.opcode = O_ICALL;  return INOARGS; } /* Misc. */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 246 "avrlex.l"
{ yylval.opcode = O_IJMP;   return INOARGS; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 247 "avrlex.l"
{ yylval.opcode = O_RETI;   return INOARGS; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 248 "avrlex.l"
{ yylval.opcode = O_RET;    return INOARGS; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 249 "avrlex.l"
{ yylval.opcode = O_SLEEP;  return INOARGS; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 250 "avrlex.l"
{ yylval.opcode = O_WDR;    return INOARGS; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 251 "avrlex.l"
{ yylval.opcode = O_EIJMP;  return INOARGS; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 252 "avrlex.l"
{ yylval.opcode = O_EICALL; return INOARGS; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 253 "avrlex.l"
{ yylval.opcode = O_SPM;    return INOARGS; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 254 "avrlex.l"
{ yylval.opcode = O_ESPM;   return INOARGS; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 255 "avrlex.l"
{ yylval.opcode = O_BCLR;   return IIMM;    }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 256 "avrlex.l"
{ yylval.opcode = O_BSET;   return IIMM;    }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 257 "avrlex.l"
{ yylval.opcode = O_RCALL;  return IIMM;    }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 258 "avrlex.l"
{ yylval.opcode = O_RJMP;   return IIMM;    }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 259 "avrlex.l"
{ yylval.opcode = O_JMP;    return IIMM;    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 260 "avrlex.l"
{ yylval.opcode = O_CALL;   return IIMM;    }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 261 "avrlex.l"
{ yylval.opcode = O_BRBC;   return IIMMIMM; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 262 "avrlex.l"
{ yylval.opcode = O_BRBS;   return IIMMIMM; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 263 "avrlex.l"
{ yylval.opcode = O_CBI;    return IIMMIMM; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 264 "avrlex.l"
{ yylval.opcode = O_SBI;    return IIMMIMM; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 265 "avrlex.l"
{ yylval.opcode = O_SBIC;   return IIMMIMM; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 266 "avrlex.l"
{ yylval.opcode = O_SBIS;   return IIMMIMM; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 267 "avrlex.l"
{ yylval.opcode = O_OUT;    return IIMMREG; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 268 "avrlex.l"
{ yylval.opcode = O_STS;    return IIMMREG; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 269 "avrlex.l"
{ yylval.opcode = O_ROL;    return IREG;    }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 270 "avrlex.l"
{ yylval.opcode = O_SER;    return IREG;    }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 271 "avrlex.l"
{ yylval.opcode = O_LSL;    return IREG;    }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 272 "avrlex.l"
{ yylval.opcode = O_BLD;    return IREGIMM; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 273 "avrlex.l"
{ yylval.opcode = O_BST;    return IREGIMM; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 274 "avrlex.l"
{ yylval.opcode = O_CBR;    return IREGIMM; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 275 "avrlex.l"
{ yylval.opcode = O_IN;     return IREGIMM; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 276 "avrlex.l"
{ yylval.opcode = O_SBRC;   return IREGIMM; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 277 "avrlex.l"
{ yylval.opcode = O_SBRS;   return IREGIMM; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 278 "avrlex.l"
{ yylval.opcode = O_LD;     return IINDIRC; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 279 "avrlex.l"
{ yylval.opcode = O_ST;     return IINDIRC; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 280 "avrlex.l"
{ yylval.opcode = O_LDD;    return IINDIRC; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 281 "avrlex.l"
{ yylval.opcode = O_STD;    return IINDIRC; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 282 "avrlex.l"
{ yylval.regid = 26;        return REGXYZ;  }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 283 "avrlex.l"
{ yylval.regid = 28;        return REGXYZ;  }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 284 "avrlex.l"
{ yylval.regid = 30;        return REGXYZ;  }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 285 "avrlex.l"
{ yylval.opcode = O_LPM;    return ILPM;    }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 286 "avrlex.l"
{ yylval.opcode = O_ELPM;   return ILPM;    }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 288 "avrlex.l"
{ yylval.val.value=yycodepos/2;yylval.val.valid=TRUE; return COUNTER;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 289 "avrlex.l"
{ yylval.val.value=yydatapos;  yylval.val.valid=TRUE; return COUNTER;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 290 "avrlex.l"
{ yylval.val.value=yyerompos;  yylval.val.valid=TRUE; return COUNTER;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 292 "avrlex.l"
list(LIST_NO_MACRO);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 293 "avrlex.l"
list(LIST_NO);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 294 "avrlex.l"
list(LIST_YES_MACRO);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 295 "avrlex.l"
list(LIST_YES);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 296 "avrlex.l"
yyeol=TRUE; if((ret=doexit()   )!=SKIPRESTART) return ret;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 297 "avrlex.l"
if(includefile()==EOL) return EOL;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 298 "avrlex.l"
return macrodef();
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 299 "avrlex.l"
errorin(E_ENDM);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 300 "avrlex.l"
return string();
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 301 "avrlex.l"
return registers();
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 302 "avrlex.l"
return integers();
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 303 "avrlex.l"
return integers();
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 304 "avrlex.l"
return integers();
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 305 "avrlex.l"
return integers();
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 306 "avrlex.l"
return integers();
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 307 "avrlex.l"
return character();
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 308 "avrlex.l"
warningin(W_HEX_ESCAPE_INVALID);yylval.val.valid = TRUE;yylval.val.value = 0; return INTEGER;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 309 "avrlex.l"
return character();
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 310 "avrlex.l"
warningin(W_OCT_ESCAPE_INVALID);yylval.val.valid = TRUE;yylval.val.value = 0; return INTEGER;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 311 "avrlex.l"
return character();
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 312 "avrlex.l"
return character();
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 313 "avrlex.l"
if((ret=identifier())!=SKIPRESTART)return ret;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 314 "avrlex.l"
yyeol=TRUE; if((ret=restart()   )!=SKIPRESTART)return ret;
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 315 "avrlex.l"
yyeol=TRUE; return endofline();
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 316 "avrlex.l"
;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 317 "avrlex.l"
;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 318 "avrlex.l"
;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 319 "avrlex.l"
;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 320 "avrlex.l"
illegal();
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 322 "avrlex.l"
ECHO;
	YY_BREAK
#line 2180 "avrlex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 402 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 402 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 401);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 322 "avrlex.l"



//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
///                                                                        ///
///   Scanner support functions                                            ///
///                                                                        ///
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////
  //
  // Identifiers
  //

int character(void)
{
  yylval.val.value = 0;
  yylval.val.valid = FALSE;

  if(yytext[1]=='\\')
  {
    switch (yytext[2])
    {
      case 'n'  : yylval.val.value = '\n' ; yylval.val.valid = TRUE; break;
      case 't'  : yylval.val.value = '\t' ; yylval.val.valid = TRUE; break;
      case 'v'  : yylval.val.value = '\v' ; yylval.val.valid = TRUE; break;
      case 'b'  : yylval.val.value = '\b' ; yylval.val.valid = TRUE; break;
      case 'r'  : yylval.val.value = '\r' ; yylval.val.valid = TRUE; break;
      case 'f'  : yylval.val.value = '\f' ; yylval.val.valid = TRUE; break;
      case 'a'  : yylval.val.value = '\a' ; yylval.val.valid = TRUE; break;
      case '\\' : yylval.val.value = '\\' ; yylval.val.valid = TRUE; break;
      case '\'' : yylval.val.value = '\'' ; yylval.val.valid = TRUE; break;
      case '\"' : yylval.val.value = '\"' ; yylval.val.valid = TRUE; break;
      case '\?' : yylval.val.value = '\?' ; yylval.val.valid = TRUE; break;
      case 'x'  :
      case 'X'  :
      {
        if(isdigit(yytext[3]))
          yylval.val.value = yytext[3] - '0';
        else if(isxdigit(yytext[3]))
          yylval.val.value = tolower(yytext[3]) - 'a' + 10;

        if(isxdigit(yytext[3]) && isxdigit(yytext[4]))
        {
          if(isdigit(yytext[4]))
            yylval.val.value = 16*yylval.val.value + yytext[4] - '0';
          else
            yylval.val.value = 16*yylval.val.value+tolower(yytext[4])-'a'+10;
        }
        yylval.val.valid = TRUE;

      } break;

      case '0'  :
      case '1'  :
      case '2'  :
      case '3'  :
      case '4'  :
      case '5'  :
      case '6'  :
      case '7'  :
      {
        yylval.val.value = yytext[2] - '0';
        if(isdigit(yytext[3]))
        {
          yylval.val.value = 8*yylval.val.value + yytext[3] - '0';
          if(isdigit(yytext[4]))
            yylval.val.value = 8*yylval.val.value + yytext[4] - '0';
        }
        if(yylval.val.value > 0xFF)
        {
          yylval.val.value = 0;
          warningin(W_OCT_OUT_OF_RANGE);
        }
        yylval.val.valid = TRUE;

      } break;

      default   : errorin(E_UNDEF_ESCAPE,yytext);
    }
  }
  else
  {
    yylval.val.value = yytext[1];
    yylval.val.valid = TRUE;
  }
  return INTEGER;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Identifiers
  //

int identifier(void)
{
  char name[MAX_ID_LENGTH+1];

  if(yytext[0] == '_' && yycfg->local_labels)
  {
    if(strlen(yytext)+strlen(yylast_used_label)+2>MAX_ID_LENGTH)
    {
      size_t len;
      
      warningin(W_IDENTIFIER_TOO_LONG);
      name[0]='@';
      memcpy(name+1, yylast_used_label, MAX_ID_LENGTH-1);
      name[MAX_ID_LENGTH] = '\0';
      len = strlen(name);
      if(len>MAX_ID_LENGTH-9)
        len = MAX_ID_LENGTH-9;      // truncate the last_used_label to leave at least 8 characters for the local label
      name[len++] = '@';
      memcpy(name+len, yytext, MAX_ID_LENGTH-len);
      name[MAX_ID_LENGTH] = '\0';
    }
    else
    {
      sprintf(name, "@%s@%s", yylast_used_label, yytext);
    }
  }
  else
  {
    if(strlen(yytext)>MAX_ID_LENGTH)
    {
      warningin(W_IDENTIFIER_TOO_LONG);
      memcpy(name, yytext, MAX_ID_LENGTH);
      name[MAX_ID_LENGTH] = '\0';
    }
    else
      strcpy(name, yytext);
  }

  yylval.symb = getsym(name);

  if(yylval.symb -> macro)
    return macro(yylval.symb);

  return SYMBOL;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Registers : r0 - r31
  //

int registers(void)
{
  int registerno;

  if(strlen(yytext)==2)
  {
    if(isdigit(yytext[1]))
      registerno= yytext[1] - '0';
    else
      return identifier();
  }
  else if(strlen(yytext)==3)
  {
    if(isdigit(yytext[1]) && isdigit(yytext[2]) )
      registerno= 10 * (yytext[1] - '0') + yytext[2] - '0';
    else
      return identifier();
  }
  else
    return identifier();

  if(registerno <= 31)
  {
    yylval.regid = registerno;
    return REGISTER;
  }
  return identifier();
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Strings
  //

int string(void)
{
  if( !(yylval.string = new char[strlen(yytext)+1]) )
    errorexit(X_OUT_OF_MEMORY);

  strcpy(yylval.string, yytext);

  return STRING;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Integer constants : Decimal=10 Hex=0xA Hex=$A Octal=012 Binaray=0b1010
  //

int integers(void)
{
  int  val;
  int  pos;
  char temp[12];

  bool foundhex = (strpbrk(yytext,"ABCDEFabcdef")!=NULL);
  bool foundbin = !(strpbrk(yytext,"ACDEFacdef23456789")!=NULL);

  // Hex : $BABE

  if(yytext[0] == '$' )
  {
    val = 0;
    pos = 1;
    while( yytext[pos] )
    {
      if(isdigit(yytext[pos]))
        val = 16*val + yytext[pos] - '0';
      else
        val = 16*val + tolower(yytext[pos]) - 'a' + 10;
      pos++;
    }
    if(pos>9)
      warningin(W_CONSTANT_TO_BIG);
  }

  // Hex : 0xBABE or 0XBABE

  else if( (yytext[0] == '0' ) && (tolower(yytext[1]) == 'x' ))
  {
    val = 0;
    pos = 2;
    while( yytext[pos] )
    {
      if(isdigit(yytext[pos]))
        val = 16*val + yytext[pos] - '0';
      else
        val = 16*val + tolower(yytext[pos]) - 'a' + 10;
      pos++;

    }
    if(pos>10)
      warningin(W_CONSTANT_TO_BIG);
  }

  // Bin : 0b01010 or 0B01010

  else if( (yytext[0] == '0' ) && (tolower(yytext[1]) == 'b' ) && foundbin)
  {
    val = 0;
    pos = 2;
    while( yytext[pos] )
      val = 2*val + yytext[pos++] - '0';
    if(pos>34)
      warningin(W_CONSTANT_TO_BIG);
  }

  // Hex : 1BABE (Hex that starts with a decimal)

  else if(isdigit(yytext[0]) && foundhex )
  {
    val = 0;
    pos = 0;
    while( yytext[pos] )
    {
      if(isdigit(yytext[pos]))
        val = 16*val + yytext[pos] - '0';
      else
        val = 16*val + tolower(yytext[pos]) - 'a' + 10;
      pos++;
    }
    if(pos>8)
      warningin(W_CONSTANT_TO_BIG);
  }


  // Integer 47806

  else
  {
    int zp = 0;

    for(; yytext[zp]=='0' ; zp++);

    if(!isdigit(yytext[zp]) && (zp>0))
     zp--;

    val = atoi(yytext+zp);
    sprintf(temp, "%i", val);
    if(val && strcmp(temp,yytext+zp)) {
      val = atol(yytext+zp);
      sprintf(temp, "%u", val);
      if(strcmp(temp,yytext+zp)) {
        val = atoi(yytext);
        warningin(W_CONSTANT_TO_BIG);
      }
    }
  }

  yylval.val.value = val;
  yylval.val.valid = TRUE;
  return INTEGER;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Illegal character
  //

void illegal(void)
{
  if(isprint(yytext[0]))
    warningin(W_INVALID_CHAR,yytext[0]);
  else
    warningin(W_INVALID_ASCII,(unsigned char)yytext[0]);
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Include file
  //

int includefile(void)
{
  char name[MAX_LINE_LENGTH+2];
  char filename[MAX_FILENAME_LENGTH+1];
  int  c;
  FILE *f1,*f2;

  if(strlen(yytext)==strlen(".include"))
  {
    yyinput();
    endofline();
    error(E_NO_FILENAME);
    return EOL;
  }

  /// Check filename ////////////////////////////////////////////////////////

  if(strlen(yytext) >= MAX_LINE_LENGTH)
    errorexit(X_LINE_TOO_LONG, yyfilename);

  strcpy(name,yytext+8+strspn(yytext,"\t\v ")
              +strspn(yytext+8+strspn(yytext,"\t\v "),"\t\v "));

  if(!strlen(name))
  {
    yyinput();
    endofline();
    error(E_NO_FILENAME);
    return EOL;
  }

  striprem(name);

  if(!strlen(name))
  {
    yyinput();
    endofline();
    error(E_NO_FILENAME);
    return EOL;
  }

  /// Read NL (or EOF) //////////////////////////////////////////////////////

  yyinput();
  endofline();

  if( !getfilename(name, filename) )
  {
    error(E_INVALID_FILENAME);
    return EOL;
  }

  /// Check context depth ///////////////////////////////////////////////////

  if( yycontext == (MAX_CONTEXT_DEPTH-1) )
  {
    errorin(E_INCLUDE_DEPTH, name);
    return EOL;
  }

  if( !(f1 = fopenInIncpath(filename,"r")) )
  {
    error(E_OPEN_FILE, filename);
    return EOL;
  }
  else if( !(f2 = fopenInIncpath(filename,"r")) )
  {
    fclose(f1);
    error(E_OPEN_FILE, filename);
    return EOL;
  }

  /// Setup context stack ///////////////////////////////////////////////////

  CONTEXT->file       = yyin;
  CONTEXT->file2      = yyin2;
  CONTEXT->line       = yyline;
  CONTEXT->offset     = yyoffset;
  CONTEXT->dataoffset = yydataoffset;
  CONTEXT->eromoffset = yyeromoffset;

  strcpy(CONTEXT->yyinlineold, yyinlineold);
  strcpy(CONTEXT->yyinline,    yyinline);
  strcpy(CONTEXT->yyinlinenew, yyinlinenew);

  statestack[yycontext++] = YY_CURRENT_BUFFER;

  /// Open input file ///////////////////////////////////////////////////////

  if(yyfilecount==MAX_FILES)
    errorexit(X_TOO_MANY_FILES);

  yyfileno = -1;

  for(c=0;c<yyfilecount;c++)
    if(!strcmp(filename, yyfilelist[c]))
      yyfileno = c+1;

  if(yyfileno==-1)
  {
    if( !(yyfilelist[yyfilecount] = new char[MAX_FILENAME_LENGTH]) )
      errorexit(X_OUT_OF_MEMORY);

    strcpy(yyfilelist[yyfilecount], filename);
    yyfileno = ++yyfilecount;
  }

  yyin   = CONTEXT->file  = f1;
  yyin2  = CONTEXT->file2 = f2;

  strcpy(CONTEXT->filename, filename);
  strcpy(yyfilename, filename);

  /// Add .include line to log //////////////////////////////////////////////

  tolog();

  if(!yyinmacro)
    yyline = 1;
  else
    yyline =0;

  yyline = 1; // XXX

  /// Read new lines into log buffers ///////////////////////////////////////

  if(!fgets(yyinline, MAX_LINE_LENGTH, yyin2))
    yyinline[0] = 0;
  if(!fgets(yyinlinenew, MAX_LINE_LENGTH, yyin2))
    yyinlinenew[0] = 0;

  if(strlen(yyinline) == MAX_LINE_LENGTH-1)
    errorexit(X_LINE_TOO_LONG, yyfilename);
  if(strlen(yyinlinenew) == MAX_LINE_LENGTH-1)
    errorexit(X_LINE_TOO_LONG, yyfilename);

  STRIPNR(yyinlinenew);
  STRIPNR(yyinline);

  /// Setup scanner to read from new file ///////////////////////////////////

  yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));

  return TRUE;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // End of line
  //

int endofline(void)
{
  int pos;

  strcpy(yyinlineold, yyinline);
  strcpy(yyinline, yyinlinenew);

  if(!ISMACRO)
  {
    if(!fgets(yyinlinenew,MAX_LINE_LENGTH,yyin2))
      yyinlinenew[0] = '\0';
    if(strlen(yyinlinenew)==MAX_LINE_LENGTH-1)
      errorexit(X_LINE_TOO_LONG, yyfilename);
    //if(yyinmacro)
      yyline++;
  }
  else
  {
    if( (int)strlen(CONTEXT->macstr) > CONTEXT->stringpos)
    {
      pos = strcspn(CONTEXT->macstr+CONTEXT->stringpos,"\n");
      if(pos<MAX_LINE_LENGTH)
        memcpy(yyinlinenew,CONTEXT->macstr+CONTEXT->stringpos, pos);
      else
        errorexit(X_MACRO_LINE_TOO_LONG, yyline, yyfilename);

      yyinlinenew[pos] = 0;
      CONTEXT->stringpos += pos+1;
    }
    else
      yyinlinenew[0] = 0;
  }

  STRIPNR(yyinlinenew);
  return EOL;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Restart scanner after first parse, and handle macro/include context
  //

int restart(void)
{
  int c;

  if(!restartcount++ && !ISMACRO)
  {
    strcpy(yyinlineold, yyinline);
    strcpy(yyinline, yyinlinenew);
    strcpy(yyinlinenew, "This should never show up");
    yyline++;
    return EOL;
  }

  restartcount = 0;

  if(yycontext)
  {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(statestack[--yycontext]);

    if( yycontextstack[yycontext+1]->ismacro )
    {
      yyinmacro--;
      strcpy(yyinlineold, CONTEXT->yyinlineold);
      strcpy(yyinline,    CONTEXT->yyinline);
      strcpy(yyinlinenew, CONTEXT->yyinlinenew);
      delete yycontextstack[yycontext+1]->macstr;

      yysymbolstack[yycontext+1] = NULL;
      yyoffset     = CONTEXT->offset;
      yydataoffset = CONTEXT->dataoffset;
      yyeromoffset = CONTEXT->eromoffset;
      yyline = CONTEXT->line + 1;
      if(ISMACRO)
        endofline();
      else
      {
        if(!fgets(yyinlinenew, MAX_LINE_LENGTH, yyin2))
          yyinlinenew[0] = 0;
      }

      if(strlen(yyinlinenew) == MAX_LINE_LENGTH-1)
        errorexit(X_LINE_TOO_LONG, yyfilename);
      memset(yycontextstack[yycontext+1],0,sizeof(context));
      return SKIPRESTART;
    }
    else
    {
      if(ISMACRO)
      {
        for(c=yycontext;c>=0;c--)
        {
          if(!yycontextstack[c]->ismacro)
          {
            strcpy(yyfilename, yycontextstack[c]->filename);
            c = -1;
          }
        }
      }
      else
        strcpy(yyfilename, CONTEXT->filename);

      yyline = CONTEXT->line;

      fclose(yycontextstack[yycontext+1]->file);
      fclose(yycontextstack[yycontext+1]->file2);

      yyin         = CONTEXT->file;
      yyin2        = CONTEXT->file2;
      yyoffset     = CONTEXT->offset;
      yydataoffset = CONTEXT->dataoffset;
      yyeromoffset = CONTEXT->eromoffset;

      strcpy(yyinline,    CONTEXT->yyinline);
      strcpy(yyinlinenew, CONTEXT->yyinlinenew);
      memset(yycontextstack[yycontext+1],0,sizeof(context));

      yyfileno = -1;
      for(c=0;c<yyfilecount;c++)
        if(!strcmp(yyfilename, yyfilelist[c]))
          yyfileno = c+1;

      if(yyfileno==-1)
        internalerror("FF");
      yylval.val.value = 0x1234;
      return SKIPRESTART;
    }
  }
  else
  {
    if(!yyparseno)
    {
      yyparseno++;
      INITEXTERN;
      yylinetxt[0]   = '\0';
      fseek(yyin, 0, SEEK_SET);
      fseek(yyin2, 0, SEEK_SET);
      if(!fgets(yyinline, MAX_LINE_LENGTH, yyin2))
        strcpy(yyinline,"\n");
      if(!fgets(yyinlinenew, MAX_LINE_LENGTH, yyin2))
        strcpy(yyinlinenew,"\n");
      STRIPNR(yyinline);
      STRIPNR(yyinlinenew);
      return RESTART;
    }
    else
      yyterminate();
  }
  return EOL;
  yyunput(0, NULL); // One yyunput() a day, keeps warning away :-)
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Handle macro definition
  //

int macrodef(void)
{
  int                   ch;
  int                   found      = FALSE;
  int                   bufsize    = 32;
  int                   pos        = 0;
  int                   founddot   = 0;
  int                   comment    = FALSE;
  char                  *buf1      = NULL;
  char                  *buf2      = NULL;
  char                  endmacro[] = ".endm";
  int                   temppos    = 0;
  int                   temptime   = 0;
  char                  temp[MAX_LINE_LENGTH+2];
  symbolTableEntry      *symb;
  int                   namestart;
  int                   nameend;
  char                  name[MAX_LINE_LENGTH+1];
  int                   l;
  int                   lastparm;
  int                   inmacro;
  int                   i;

  /// Check that this is not in a macro context /////////////////////////////

  if(CONTEXT->ismacro)
  {
    while( ((ch=yyinput())!='\r') && (ch!='\n') && (ch!=EOF) );
    errorin(E_MACRO_IN_MACRO);
    endofline();
    return EOL;
  }

  /// Allocate buffer ///////////////////////////////////////////////////////

  if( !(buf1 = new char[bufsize]) )
    errorexit(X_OUT_OF_MEMORY);

  /// Get macro string from input ///////////////////////////////////////////

  while(!found)
  {
    ch = yyinput();

    if(tolower(ch)==endmacro[founddot])
      founddot++;
    else
      founddot=0;

    if(founddot==4)
    {
      found = TRUE;
      buf1[pos-3] = '\0';
      sprintf(yyinlinenew,".endm");
    }
    else if(ch=='\n')
    {
      comment           = FALSE;
      temp[temppos]     = 0;
      temppos           = 0;
      if(temptime++)
      {
        STRIPNR(temp);
        strcpy(yyinlinenew, temp);
        endofline();
        tolog();
      }
    }
    else if(ch==EOF)
      found = TRUE;
    else if(ch==';')
      comment = TRUE;

    buf1[pos++] = ch;

    if(ch!='\n')
      temp[temppos++] = ch;

    if(pos==bufsize)
    {
      buf2 = new char[2*bufsize];
      memcpy(buf2, buf1, bufsize);
      delete buf1;
      buf1 = buf2;
      bufsize *=2;
    }
  }

  /// Read until end of .endmacro line //////////////////////////////////////

  while( ((ch=yyinput()) != EOF) && (ch!='\n') && (ch!='\r'))
    yyinlinenew[temppos++] = ch;

  yyinlinenew[temppos] = 0;

  strcpy(temp, yyinlinenew);

  endofline();
  tolog();

  if((ch==EOF)&&(founddot<4))
  {
    delete buf1;
    if(strlen(yyinlineold))
      yyinlineold[strlen(yyinlineold)-1] = '\0';
    STRIPWS(yyinlineold);
    error(E_EOF_IN_MACRO);
    return restart();
  }

  /// Process string ////////////////////////////////////////////////////////

  pos = strlen(buf1);

  if( pos  && !(buf1[pos-1]=='\n') )
    strcat(buf1, "\n");

  /// Get macro name ////////////////////////////////////////////////////////

  namestart = strspn(buf1,"\t\v ");
  nameend   = strcspn(buf1+namestart,"\t\v \r\n;")+namestart;
  memcpy(name, buf1+namestart, nameend-namestart);
  name[nameend-namestart] = '\0';

  /// Setup macro ///////////////////////////////////////////////////////////

  for(i=yycontext; !yysymbolstack[i]; i--);
 
  if(!yyparseno)
  {
    if(strlen(name)>MAX_ID_LENGTH) {
      warningin(W_MAC_IDENTIFIER_TOO_LONG);
      name[MAX_ID_LENGTH] = '\0';      
    }

    if( (symb=yysymbolstack[i]->get(name)) )
    {
      error(E_MACRO_REDEF,name);
      return EOL;
    }
    symb = yysymbolstack[i]->add(name);
  }
  else {
    if(strlen(name)>MAX_ID_LENGTH) {
      warningin(W_MAC_IDENTIFIER_TOO_LONG);
      name[MAX_ID_LENGTH] = '\0';      
    }
    symb=yysymbolstack[i]->get(name);
  }

  if(!symb)
    internalerror("DM");

  if( ISUSED(symb) && ((symb->macdefline != yyline)
      ||(strcmp(symb->macfilename, yyfilename)) ))
  {
    strcpy(yyinlineold,".endmacro");
    error(E_MACRO_REDEF,name);
  }
  else
  {
    // If first parse - allocate space in symbol table for macro

    if(!yyparseno)
    {
      symb -> macro      = TRUE;
      symb -> macsize    = strlen(buf1)-nameend;
      symb -> macdefline = yyline;

      if( !(symb -> macstr = new char[symb->macsize+2]))
        errorexit(X_OUT_OF_MEMORY);

      strcpy(symb->macstr, buf1+nameend);
      strcpy(symb->macfilename,yyfilename);
    }

    // In second parse - check argument usage

    else if( yyline == symb->macdefline )
    {
      l = symb->macsize;
      symb -> macrodone = TRUE;

      while(l)
      {
        if( isdigit(symb->macstr[l]) && (symb->macstr[l-1] == '@' ) )
          symb->macparmlist[(symb->macstr[l]) -'0'] = 1;
        l--;
      }
      lastparm = -1;
      for(l=0;l<10;l++)
        if(symb->macparmlist[l])
          lastparm = l;

      inmacro=yyinmacro;
      yyinmacro=1;

      for(l=0;l<=lastparm;l++)
        if(!symb->macparmlist[l])
          warningin(W_MACRO_UNUSES_PARM, l, name);

      yyinmacro=inmacro;

      strcpy(yyinlineold, yyinline);
      strcpy(yyinline, yyinlinenew);
    }
  }

  strcpy(yyinline, temp);
  endofline();
  delete buf1;

  if(!strlen(name))
    error(E_NO_MACRO_NAME);

  return MACRODEF;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Insert macro in input stream
  //

int macro(symbolSA symb)
{
  char  **parmlist;
  int   c;
  char  line[MAX_LINE_LENGTH+2];
  int   pos = 0;
  int   parm;
  int   inputparms = 0;
  int   parmpos;
  int   rem;
  int   next;
  int   l;
  int   len;
  char  *str;
  int   res;
  int   ch;
  char  orginline[MAX_LINE_LENGTH+2];

  if( (!symb -> macrodone) && (yyparseno) )
  {
    errorin(E_DEF_USE);
    while(((ch=yyinput())!='\n') && (ch!=EOF) );
    endofline();

    return EOL;
  }

  strcpy(orginline, yyinline);

  /// Allocate space for parameters /////////////////////////////////////////

  if( !(parmlist = new char*[10]) )
    errorexit(X_OUT_OF_MEMORY);

  for(c=0;c<10;c++)
  {
    if(!(parmlist[c]= new char [MAX_LINE_LENGTH+1]))
      errorexit(X_OUT_OF_MEMORY);
    else
      memset(parmlist[c], 0, MAX_LINE_LENGTH+1);
  }

  /// Get parameters from input /////////////////////////////////////////////

  while( ((line[pos]=yyinput())!='\n') && (line[pos++]!=EOF) );

  if(pos && (line[pos-1]==EOF) )
    line[--pos] = 0;

  line[pos]=0;
  line[pos+1]=0;

  /// Local strtok() that inserts parameters into parameter list ////////////

  if(pos)
  {
    pos         = 0;
    parm        = 0;
    rem         = FALSE;

    striprem(line);

    while(line[pos] && (parm<10))
    {
      next        = FALSE;
      parmpos     = 0;

      while( (!next) && (line[pos]) )
      {
        if( (line[pos]=='"') || (line[pos]=='\'') )
          rem ? rem = FALSE : rem = TRUE;
        else if( line[pos]=='\\' )
          parmlist[parm][parmpos++] = line[pos++];
        else if ( (line[pos]==',') && !rem)
        {
          parmlist[parm][parmpos] = '\0';
          next = TRUE;
        }
        parmlist[parm][parmpos++] = line[pos++];
      }
      parm++;
    }

    inputparms = parm;

  /// Clean up parametes (remove leading/trailing whitespaces and ',' ////////

    for(c=0;c<10;c++)
    {
      pos = strlen(parmlist[c]);
      if(pos)
        pos--;
      while( ((parmlist[c][pos]==',')||(isspace(parmlist[c][pos])))&&(pos>=0))
        parmlist[c][pos--] = '\0';

      if(pos)
      {
        l = strspn(parmlist[c], "\t\v ");
        len = strlen(parmlist[c])-l;
        if(l)
          memmove(parmlist[c], parmlist[c]+l,len);
        parmlist[c][len] = '\0';
      }
    }
  }

  /// Check that number of parameters specified, equals the ones used ////////

  for(c=0;c<10;c++)
  {
    if( parmlist[c][0] && !symb->macparmlist[c])
      warningin(W_ARG_SPEC, c);
    else if( !parmlist[c][0] && symb->macparmlist[c])
      warningin(W_ARG_USED, c);
  }

  /// Insert parameters in macro string //////////////////////////////////////

  if(! (str = new char[symb-> macsize + MAX_LINE_LENGTH +5] ) )
    errorexit(X_OUT_OF_MEMORY);

  memset(str,0, symb-> macsize + MAX_LINE_LENGTH +5);

  pos     = 0;
  parm    = 0;
  res     = 0;

  while( symb->macstr[pos] )
  {
    if( (symb->macstr[pos]=='@') && (isdigit(symb->macstr[pos+1])) )
    {
      parm     = symb->macstr[pos+1] - '0';
      pos     += 2;
      parmpos  = 0;

      while(parmlist[parm][parmpos])
        str[res++] = parmlist[parm][parmpos++];
    }
    else
      str[res++] = symb->macstr[pos++];
  }

  /// Setup new scanner context //////////////////////////////////////////////

  if( yycontext == (MAX_CONTEXT_DEPTH-1) )
  {
    errorexit(X_MACRO_DEPTH);

    for(c=0;c<10;c++)
      delete parmlist[c];
    delete parmlist;

    return EOL;
  }

  strcpy(yyinlineold, yyinline);
  strcpy(yyinline, yyinlinenew);

  strcpy(CONTEXT->yyinlineold, yyinlineold);
  strcpy(CONTEXT->yyinline,    yyinline);
  strcpy(CONTEXT->yyinlinenew, yyinlinenew);

  CONTEXT->line        = yyline;
  CONTEXT->offset      = yyoffset;
  CONTEXT->dataoffset  = yydataoffset;
  CONTEXT->eromoffset  = yyeromoffset;

  statestack[yycontext++]                = YY_CURRENT_BUFFER;
  CONTEXT->ismacro     = TRUE;
  CONTEXT->macstr      = str;
  yyoffset     = yycodepos/2;
  yyeromoffset = yyerompos;
  yydataoffset = yydatapos;

  memset(yyinlinenew, 0, MAX_LINE_LENGTH);
  memset(yyinline,  0, MAX_LINE_LENGTH);

  pos = strcspn(str,"\n") + 1;

  strcpy(yyinline, symb->name);

  for(l=0;l<inputparms;l++)
  {
    if(l)
      strcat(yyinline, ", ");
    else
      strcat(yyinline, " ");
    strcpy(yyinline+strlen(yyinline),parmlist[l]);
  }

  if(pos+strlen(yyinline) >= MAX_LINE_LENGTH-1 )
    errorexit(X_MACRO_LINE_TOO_LONG, yyline, yyfilename);

  memcpy(yyinline+strlen(yyinline), str ,pos);

  CONTEXT->stringpos = strcspn(str+pos,"\n") + 1;

  memcpy(yyinlinenew, str + pos, CONTEXT->stringpos);

  CONTEXT->stringpos += pos;

  strcpy(yyinline, orginline);

  yyinmacro++;
  yyfirstmacroline = TRUE;

  yy_scan_string(str);

  /// Delete parameter list //////////////////////////////////////////////////

  for(c=0;c<10;c++)
    delete parmlist[c];
  delete parmlist;

  /// Allocate new symbol table //////////////////////////////////////////////

  if(!yyparseno)
  {
    if(symb -> macsym)
      yysymbolstack[yycontext] = symb -> macsym;
    else
    {
      if( !(yysymbolstack[yycontext] = symb -> macsym = new symbolTable()) )
        errorexit(X_OUT_OF_MEMORY);

      if( !symb -> macsym->init(yycfg->casesensitive, 16) )
        errorexit(X_OUT_OF_MEMORY);
    }
  }
  else
    yysymbolstack[yycontext] = symb -> macsym;

  if(!yysymbolstack[yycontext])
    internalerror("MA %i", yycontext);

//  yyline++;

  return SKIPRESTART;
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Turn listing on/off
  //

void list(int listtype)
{
  switch(listtype)
  {
    case LIST_NO        : yylist      = FALSE; break;
    case LIST_YES       : yylist      = TRUE ; break;
    case LIST_NO_MACRO  : yylistmacro = FALSE; break;
    case LIST_YES_MACRO : yylistmacro = TRUE ; break;
    default             : internalerror("LU %04X",listtype);
  }
}

  ////////////////////////////////////////////////////////////////////////////
  //
  // Read to end of current context
  //

int doexit(void)
{
  while(yyinput()!=EOF);
  yyeol=TRUE; 
  return restart();
}


/// END OF FILE //////////////////////////////////////////////////////////////

